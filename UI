library(shiny)
library(shinydashboard)
library(dplyr)
library(tidyr)
library(ggplot2)
library(maps)
library(leaflet)
library(lubridate)
library(RColorBrewer)
library(clifro)
library(hexbin)

city <- read.csv(file="./data/city_attributes.csv")
city$City <- gsub(" ",".",city$City)
city <- city[(city$Country=="United States"),]

avg_period_choices <- c("5-year","Annual","Monthly")
# 
years <- c(2013:2017)

months <- c("January","February","March","April","May","June",
             "July","August","September","October","November","December")

ui <- dashboardPage(
      dashboardHeader(title = "Weather & AQ App"),
      dashboardSidebar(
        selectizeInput(inputId="avg_period",
                       label="Averaging Period",
                       choices=avg_period_choices),
        conditionalPanel(
            condition = "input.avg_period=='Annual'",
            selectizeInput(inputId="year_period",
                           label="Time Period Selection",
                           choices=years)
        ),
        conditionalPanel(
            condition = "input.avg_period=='Monthly'",
            selectizeInput(inputId="month_period",
                           label="Time Period",
                           choices=months)
        ),
        sliderInput("hrofday",label=h5(strong("Hour of Day")),min=0,max=23,value=c(0,23)),
        radioButtons("pol","Map and Histogram Display:",
                     c("Temperature (deg F)" = "temp"))
    ),
    dashboardBody(
        tags$head(tags$style(HTML('.info-box {min-height: 76px;} .info-box-icon {height: 76px; line-height: 76px;} .info-box-content {padding-top: 0px; padding-bottom: 0px;}'))),
        fluidRow(
            box(title = "Select a City", leafletOutput("map"),width=16)
        ),
        fluidRow(
            #box(title="Histogram of Weather Observations",status="primary",solidHeader=TRUE,plotOutput("dist"),width=4),
            #box(title="O3 vs. NO2 Hexbin Plot",status="primary",solidHeader=TRUE,plotOutput("hexbin"),width=4),
          box(title="More Information",status="info",solidHeader=TRUE,
              fluidRow(uiOutput("cityBox")),
              fluidRow(uiOutput("countBox")),
              fluidRow(uiOutput("completeBox"))
              ,width=5,height=300),
          box(title="Wind Plot",status="primary",solidHeader=TRUE,plotOutput("wrose"),width=5)
        )
    )
)

temp_sub <- read.csv(file="./temp_sub.csv")
pal_temp <- colorNumeric(palette = c("#6600ff","yellow","#cc0000"), domain = c(10,105))

server <- function(input, output, session) {
    avg_per <- reactive({input$avg_period})
    time_per <- reactive({if (avg_per()=="Annual") {
        input$year_period 
    } else if (avg_per()=="Monthly") {
        input$month_period
    } else {
        "All"
    }
    })
    start_hour <- reactive({input$hrofday[1]})
    end_hour <- reactive({input$hrofday[2]})
    select_city <- reactive({input$map_marker_click$id})
    output$cityBox <- renderUI({
        if (is.null(select_city())) {
            infoBox("Selected City","None - select from map",icon=icon("city"),fill=TRUE,width=12)
        } else {
            infoBox("Selected City",select_city(),icon=icon("city"),fill=TRUE,width=12)
        }
    })
    output$climateBox <- renderUI({
        if (is.null(select_city())) {
            infoBox("Climate Description","None - select from map",icon=icon("sun"),fill=TRUE,width=12)
        } else {
            infoBox("Climate Description",select(filter(city,City==select_city()),Climate),icon=icon("sun"),fill=TRUE,width=12)
        }
    })
    temp_avg <- reactive({
        if (avg_per()=="Annual") {
            temp_sub %>% filter(Year==time_per() & HrofDay >= start_hour() & HrofDay <= end_hour()) %>% group_by(City) %>%
                summarize(Temp_avg=mean(Temp,na.rm=TRUE)) %>% 
                merge(city,by="City")
        } else if (avg_per()=="Monthly") {
            temp_sub %>% filter(grepl(as.character(time_per()),Month) & HrofDay >= start_hour() & HrofDay <= end_hour()) %>%
                group_by(City) %>% summarize(Temp_avg=mean(Temp,na.rm=TRUE))%>% merge(city,by="City")
        } else {
            temp_sub %>% filter(HrofDay >= start_hour() & HrofDay <= end_hour()) %>% group_by(City) %>% 
                summarize(Temp_avg=mean(Temp,na.rm=TRUE))%>% 
                merge(city,by="City")
        }
    })
    temp_city <- reactive({
        if (avg_per()=="Annual") {
            temp_sub %>% 
                filter(Year==time_per() & HrofDay >= start_hour() & HrofDay <= end_hour() & 
                           grepl(as.character(select_city()),City))
        } else if (avg_per()=="Monthly") {
            temp_sub %>% filter(grepl(as.character(time_per()),Month) & HrofDay >= start_hour() & HrofDay <= end_hour() &
                                    grepl(as.character(select_city()),City))
        } else {
            temp_sub %>% filter(HrofDay >= start_hour() & HrofDay <= end_hour() & 
                                    grepl(as.character(select_city()),City))
        }
    })
    output$countBox <- renderUI({
        if (is.null(select_city())) {
            infoBox("Number of Observations",0,icon=icon("th-list"),fill=TRUE,width=12)
        } else {
            infoBox("Number of Observations",nrow(temp_city()),icon=icon("th-list"),fill=TRUE,width=12)
        }
    })
    output$completeBox <- renderUI({
        if (is.null(select_city())) {
            infoBox("Percent Completeness","N/A",icon=icon("percent"),fill=TRUE,width=12)
        } else {
            if (avg_per()=="Annual") {
                infoBox("Percent Completeness",round(100*nrow(temp_city())/(365*(end_hour()-start_hour()+1)),1),
                        icon=icon("percent"),fill=TRUE,width=12)
            } else if (avg_per()=="Monthly") {
                if (time_per()=="February") {
                    infoBox("Percent Completeness",round(100*nrow(temp_city())/(28*(end_hour()-start_hour()+1)*5),1),
                            icon=icon("percent"),fill=TRUE,width=12)
                } else if (time_per() %in% c("April","June","September","November")) {
                    infoBox("Percent Completeness",round(100*nrow(temp_city())/(30*(end_hour()-start_hour()+1)*5),1),
                            icon=icon("percent"),fill=TRUE,width=12)
                } else {
                    infoBox("Percent Completeness",round(100*nrow(temp_city())/(31*(end_hour()-start_hour()+1)*5),1),
                            icon=icon("percent"),fill=TRUE,width=12)
                }
            } else {
                infoBox("Percent Completeness",round(100*nrow(temp_city())/(365*(end_hour()-start_hour()+1)*5),1),
                        icon=icon("percent"),fill=TRUE,width=12)
            }
        }    
    })
    output$map <- renderLeaflet({
                   temp = leaflet(data=temp_avg()) %>% addTiles() %>%
                   addCircleMarkers(~Longitude,~Latitude,color=~pal_temp(Temp_avg),label=~round(Temp_avg,digits=0),
                                    labelOptions = labelOptions(noHide = TRUE,textOnly=TRUE,direction="center"),
                                    popup=~City,layerId=~City)
    })
               
        
    

    observeEvent(input$map_marker_click, {
        selected_city<-input$map_marker_click$id
    })
    observeEvent(input$map_marker_click, {
        output$dist <- renderPlot({
            
                   temp = subset(temp_city(),!is.na(Temp)) %>% 
                       ggplot(aes(x=Temp,fill=factor(Group,levels=c("Snow","Rain","Fog","Cloudy","Clear")))) + 
                       geom_histogram(binwidth=5,color="#333333",alpha=0.5) +
                       guides(fill=guide_legend(title="Description")) + 
                       scale_fill_manual(values=c("Snow"="#6600ff","Rain"="#0066ff","Fog"="#00ff99","Cloudy"="#ffff00",
                                                  "Clear"="#ff6600")) + xlab("Temperature (deg F)")
                   
        })
    })
    observeEvent(input$map_marker_click, {
        output$hexbin <- renderPlot({
            ggplot(data=temp_city()) + stat_binhex(aes(color=..count..)) +
                theme(legend.position='none') + scale_fill_continuous(type="viridis")
        })
    })
    temp_city_wind <- reactive({drop_na(temp_city())})
    observeEvent(input$map_marker_click, {
        output$wrose <- renderPlot({
            windrose(temp_city_wind()$Wspd,temp_city_wind()$Wdir,n_directions=12,
                     speed_cuts=c(1,3,5,8,12,20,50),col_pal="YlOrRd")
        })
    })
}

shinyApp(ui, server)
